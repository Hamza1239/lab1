

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package strassen;

/**
 *
 * @author haleem.bscs14seecs
 */
import java.io.*;     // Importing java package
public class Strassen // creating class Strassen
{
public static BufferedReader br =new BufferedReader(new InputStreamReader(System.in));  // Creation of Objects
public Strassen() throws IOException       // In case of errors throw exception
{
int n;
int[][] a, b, c;
System.out.print("Enter the number of rows or colums of Square Matrix: ");
n = Integer.parseInt(br.readLine());  // Parsing into Integers
a = new int[n][n];     // Creation of 2D Array for 1st Matrix       
b = new int[n][n];     // Creation of 2D Array for 2nd Matrix
c = new int[n][n];     // Creation of 2D Array for Result Matrix

System.out.print("\nEnter values for 1st Matrix:\n");
for(int i=0; i<n; i++)
{
for(int j=0; j<n; j++)
{                                        // Two FOR Loops for Population of 1st Matrix at respective Place 
System.out.print("Enter the value of cell("+(i+1)+","+(j+1)+"): ");
a[i][j] = Integer.parseInt(br.readLine());
}
}
System.out.print("\nEnter values for 2nd Matrix:\n");
for(int i=0; i<n; i++)
{
for(int j=0; j<n; j++)
{                                       // Two FOR Loops for Population of 2nd Matrix at respective Place 
System.out.print("Enter the value of cell ("+(i+1)+","+(j+1)+"): ");
b[i][j] = Integer.parseInt(br.readLine());    // Taking Input
}
}
System.out.print("\n\nBy Strassen Matrix Multiplication method:\n");
c = strassenMatrixMultiplication(a, b);
printArray(c);                     // Populating Array
}
public int [][] strassenMatrixMultiplication(int [][] A, int [][] B)    // Function taking 2 2D Arrays as its Arguments
{
int n = A.length;
int [][] result = new int[n][n];
if((n%2 != 0 ) && (n !=1))     // Required Conditions for Multiplication
{
int[][] a1, b1, c1;
int n1 = n+1;                   // Length of A + 1
a1 = new int[n1][n1];
b1 = new int[n1][n1];          // Assignment of Array
c1 = new int[n1][n1];
for(int i=0; i<n; i++)
for(int j=0; j<n; j++)             // Two For Loops for population
{
a1[i][j] =A[i][j];              // Assignment of Array A to a1
b1[i][j] =B[i][j];              // Assignment of Array B to b1
}
c1 = strassenMatrixMultiplication(a1, b1);
for(int i=0; i<n; i++)
for(int j=0; j<n; j++)
result[i][j] =c1[i][j];          // Two For Loops for population of Result Array
return result;
}
if(n == 1)
{
result[0][0] = A[0][0] * B[0][0];     // Array Multiplication
}
else
{
int [][] A11 = new int[n/2][n/2];
int [][] A12 = new int[n/2][n/2];
int [][] A21 = new int[n/2][n/2];
int [][] A22 = new int[n/2][n/2];
int [][] B11 = new int[n/2][n/2];           // Assignment of Array
int [][] B12 = new int[n/2][n/2];
int [][] B21 = new int[n/2][n/2];
int [][] B22 = new int[n/2][n/2];
divideArray(A, A11, 0 , 0);
divideArray(A, A12, 0 , n/2);               // Making SubArray by dividing it
divideArray(A, A21, n/2, 0);
divideArray(A, A22, n/2, n/2);                                 // Main Logic of Strassens' Algorithm
divideArray(B, B11, 0 , 0);
divideArray(B, B12, 0 , n/2);
divideArray(B, B21, n/2, 0);
divideArray(B, B22, n/2, n/2);
int [][] P1 = strassenMatrixMultiplication(addMatrices(A11, A22), addMatrices(B11, B22));
int [][] P2 = strassenMatrixMultiplication(addMatrices(A21, A22), B11);
int [][] P3 = strassenMatrixMultiplication(A11, subtractMatrices(B12, B22));
int [][] P4 = strassenMatrixMultiplication(A22, subtractMatrices(B21, B11));
int [][] P5 = strassenMatrixMultiplication(addMatrices(A11, A12), B22);            // Addition of Matrices
int [][] P6 = strassenMatrixMultiplication(subtractMatrices(A21, A11), addMatrices(B11, B12));
int [][] P7 = strassenMatrixMultiplication(subtractMatrices(A12, A22), addMatrices(B21, B22));
int [][] C11 = addMatrices(subtractMatrices(addMatrices(P1, P4), P5), P7);
int [][] C12 = addMatrices(P3, P5);
int [][] C21 = addMatrices(P2, P4);
int [][] C22 = addMatrices(subtractMatrices(addMatrices(P1, P3), P2), P6);
copySubArray(C11, result, 0 , 0);
copySubArray(C12, result, 0 , n/2);       // Copying SubArray into Main Array
copySubArray(C21, result, n/2, 0);
copySubArray(C22, result, n/2, n/2);
}
return result;
}
public int [][] addMatrices(int [][] A, int [][] B)
{
int n = A.length;
int [][] result = new int[n][n];
for(int i=0; i<n; i++)
for(int j=0; j<n; j++)
result[i][j] = A[i][j] + B[i][j];           // Two FOR Loops for Addition
return result;
}
public int [][] subtractMatrices(int [][] A, int [][] B)
{
int n = A.length;
int [][] result = new int[n][n];
for(int i=0; i<n; i++)
for(int j=0; j<n; j++)
result[i][j] = A[i][j] - B[i][j];           // Two FOR Loops for Subtraction
return result;
}
public void divideArray(int[][] parent, int[][] child, int iB, int jB)    // Division of Array into Child
{
for(int i1 = 0, i2=iB; i1<child.length; i1++, i2++)
for(int j1 = 0, j2=jB; j1<child.length; j1++, j2++)
{
child[i1][j1] = parent[i2][j2];
}
}
public void copySubArray(int[][] child, int[][] parent, int iB, int jB)     // Copying of array
{
for(int i1 = 0, i2=iB; i1<child.length; i1++, i2++)
for(int j1 = 0, j2=jB; j1<child.length; j1++, j2++)
{
parent[i2][j2] = child[i1][j1];
}
}
public void printArray(int [][] array)      // Printing of Array
{
int n = array.length;
System.out.println();
for(int i=0; i<n; i++)
{
for(int j=0; j<n; j++)
{
System.out.print(array[i][j] + "\t");            // Printing of Array
}
System.out.println();
}
System.out.println();
}
public static void main(String[] args) throws IOException       // IO Exception in case of Errors
        
{
new Strassen();
}
}

